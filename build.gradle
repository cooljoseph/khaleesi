buildscript{
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.spring.io/libs-snapshot' }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE'
    }
}

group 'com.kakaocorp.commerce'
version '0.0.1-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext{
    javaVersion = '1.8'
    queryDslVersion = '4.1.4'
    queryDslOutput = file("src-gen/main/java")
    embeddedRedisVersion = '0.6'
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir "src-gen/main/java"
        }
    }
}

dependencies {
    compile ('org.springframework.boot:spring-boot-starter-web') {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile 'org.springframework.boot:spring-boot-starter-jetty'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-devtools'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-data-redis'

    compile 'com.google.guava:guava:23.6-jre'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.projectlombok:lombok:1.18.0'

    compile "com.querydsl:querydsl-core:${queryDslVersion}"
    compile "com.querydsl:querydsl-apt:${queryDslVersion}"
    compile "com.querydsl:querydsl-jpa:${queryDslVersion}"

    compile "com.github.kstyrc:embedded-redis:${embeddedRedisVersion}"

    compile 'mysql:mysql-connector-java:5.1.45'
    compile 'com.zaxxer:HikariCP:2.7.6'
    compile 'org.flywaydb:flyway-core:5.0.6'

    testCompile 'junit:junit'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'com.h2database:h2:1.4.191' // for flyway-test

    runtime 'org.codehaus.groovy:groovy:2.4.12'
}

buildDir = 'target'

//task initSrc {
//    project.sourceSets*.allSource.srcDirTrees.flatten().dir.each {
//        dir -> dir.mkdirs()
//    }
//}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

task generateQueryDSL(type: JavaCompile, group: 'build') {
    doFirst {
        if (!queryDslOutput.exists()) {
            logger.info("Creating `$queryDslOutput` directory")

            if (!queryDslOutput.mkdirs()) {
                throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
            }
        }
    }

    source = sourceSets.main.java
    classpath = configurations.compile
    options.compilerArgs = [
            "-proc:only",
            "-processor",
            "com.querydsl.apt.jpa.JPAAnnotationProcessor"
    ]
    destinationDir = queryDslOutput
}

compileJava.dependsOn(generateQueryDSL)
compileTestJava.dependsOn(generateQueryDSL)

/**
 * gradle clean task 실행 시 querydsl 경로 제거
 */
clean {
    delete queryDslOutput
}

// 소스/jar 인코딩
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
